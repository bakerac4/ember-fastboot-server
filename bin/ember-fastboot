#!/usr/bin/env node
'use strict';

// Provide a title to the process in `ps`
process.title = 'ember-fastboot-server';

var FastBootServer = require('../lib/server');
var express = require('express');
var parseArgs = require('minimist');
var path = require('path');
var glob = require('glob');
var assert = require('assert');

var options = parseArgs(process.argv.slice(2));
var distFile = options['dist-file'];
var appFile = options['app-file'];
var vendorFile = options['vendor-file'];
var htmlFile = options['html-file'];
var configFile = options['config-file'];

if (distFile) {
  findFromDist();
}

if (!appFile) {
  console.error("You must specify the path to an application file with the --app-file option.");
  return;
}

if (!vendorFile) {
  console.error("You must specify the path to a vendor file with the --vendor-file option.");
  return;
}

if (!htmlFile) {
  console.error("You must specify the path to a HTML file with the --html-file option.");
  return;
}

// Stubs out the `ui` object for printing to the terminal used
// by Ember CLI addons.
var ui = {
  writeLine: function() {
    console.log.apply(console, arguments);
  }
};

var server = new FastBootServer({
  appFile: appFile,
  vendorFile: vendorFile,
  htmlFile: htmlFile,
  configFile: configFile,
  ui: ui
});

console.log('Booting Ember app...');

// FastFailâ„¢: this is not mandatory; the first call to visit would
// also boot the app anyway. This is just to provide useful feedback
// instead of booting a server that keeps serving 500.
//
// Note that Application#boot is still a private API atm, so it might
// go through more churn in the near term.
server.app.boot().then(function() {
  console.log('Ember app booted successfully.');

  var app = express();

  app.get('/*', server.middleware());

  var listener = app.listen(options.port, function() {
    var host = listener.address().address;
    var port = listener.address().port;
    var family = listener.address().family;

    if (family === 'IPv6') { host = '[' + host + ']'; }

    console.log('Ember FastBoot running at http://' + host + ":" + port);
  });
}, function(error) {
  if (error.stack) {
    console.error('An error occured when booting Ember app...');
    console.error(error.stack);
  } else if (error.message) {
    console.error('An error occured when booting Ember app: ' + error.message);
  } else {
    console.error('An unknown error occured when booting Ember app: ' + JSON.stringify(error));
  }

  process.exit(1);
});

function findFromDist() {
  appFile = findAppFile();
  vendorFile = findVendorFile();
  htmlFile = findHTMLFile();
  configFile = findConfigFile();
}

function findAppFile() {
  return findFile('app', path.join(distFile, "assets", "!(vendor*).js"));
}

function findVendorFile() {
  return findFile('vendor', path.join(distFile, "assets", "vendor*.js"));
}

function findHTMLFile() {
  return findFile('html', path.join(distFile, 'index*.html'));
}

function findConfigFile() {
  return findFile('config', path.join(distFile, 'fastboot-config.json'));
}

function findFile(name, globPath) {
  var glob = require('glob');
  var files = glob.sync(globPath);

  assert(files.length === 1, "Found " + files.length + " " + name + " files (expected 1) when globbing '" + globPath + "'.");

  return files[0];
}
